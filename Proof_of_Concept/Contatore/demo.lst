
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800162c l    d  .rodata	00000000 .rodata
08001670 l    d  .init_array	00000000 .init_array
08001678 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000460 l    d  .bss	00000000 .bss
20000524 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 C:\msys64\tmp\ccsPD21X.o
f1e0f85f l       *ABS*	00000000 BootRAM
080003a4 l       .text	00000000 LoopCopyDataInit
0800039c l       .text	00000000 CopyDataInit
080003b8 l       .text	00000000 LoopFillZerobss
080003b2 l       .text	00000000 FillZerobss
080003ca l       .text	00000000 LoopForever
080003e4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08001614 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000460 l       .bss	00000001 completed.1
08001678 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000464 l       .bss	00000018 object.0
08001674 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080002b4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 main.c
080003e6 l     F .text	0000000a Error_Handler
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_msp.c
00000000 l    df *ABS*	00000000 stm32f3xx_it.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_tim.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 c:/users/aceep/onedrive/desktop/armcompiler/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 c:/users/aceep/onedrive/desktop/armcompiler/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
0800167c l       .fini_array	00000000 __fini_array_end
08001678 l       .fini_array	00000000 __fini_array_start
08001678 l       .init_array	00000000 __init_array_end
08001670 l       .init_array	00000000 __preinit_array_end
08001670 l       .init_array	00000000 __init_array_start
08001670 l       .init_array	00000000 __preinit_array_start
080003e4  w    F .text	00000002 RTC_Alarm_IRQHandler
080003e4  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080003e4  w    F .text	00000002 TIM8_CC_IRQHandler
080006c8 g     F .text	00000002 DebugMon_Handler
0800074a g     F .text	00000028 HAL_TIM_Base_Stop
2000047c g     O .bss	00000001 __lock___atexit_recursive_mutex
08001380 g     F .text	00000064 HAL_NVIC_SetPriority
080003e4  w    F .text	00000002 TIM1_CC_IRQHandler
080006be g     F .text	00000002 HardFault_Handler
00000200 g       *ABS*	00000000 _Min_Stack_Size
080003e4  w    F .text	00000002 USB_HP_IRQHandler
080006cc g     F .text	00000002 SysTick_Handler
08000c68 g     F .text	0000000a HAL_GPIO_WritePin
080003e4  w    F .text	00000002 PVD_IRQHandler
080007e8 g     F .text	00000160 HAL_TIM_IRQHandler
080003e4  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800167c g       *ABS*	00000000 _sidata
080006ca g     F .text	00000002 PendSV_Handler
08001428  w    F .text	00000002 HAL_TIMEx_CommutCallback
080006bc g     F .text	00000002 NMI_Handler
080013e4 g     F .text	0000001c HAL_NVIC_EnableIRQ
08001670 g       .init_array	00000000 __exidx_end
080003e4  w    F .text	00000002 EXTI3_IRQHandler
080011a0 g     F .text	00000064 HAL_RCC_GetSysClockFreq
08001558 g     F .text	0000001c BSP_LED_Off
20000428 g     O .data	00000004 __atexit_recursive_mutex
080006e4 g     F .text	00000066 HAL_TIM_Base_DeInit
08000c84 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08000a64  w    F .text	00000002 HAL_MspInit
08000c72 g     F .text	00000012 HAL_GPIO_TogglePin
0800162c g       .text	00000000 _etext
20000460 g       .bss	00000000 _sbss
08000ae0 g     F .text	00000188 HAL_GPIO_Init
2000043c g     O .data	00000004 BUTTON_PORT
0800158c g     F .text	00000088 BSP_PB_Init
080003e4  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080006dc g     F .text	00000006 EXTI0_IRQHandler
080003e4  w    F .text	00000002 I2C2_EV_IRQHandler
080003e4  w    F .text	00000002 FPU_IRQHandler
20000430 g     O .data	00000004 SystemCoreClock
080003e4  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
20000434 g     O .data	00000001 uwTickFreq
080006c4 g     F .text	00000002 UsageFault_Handler
080003e4  w    F .text	00000002 ADC1_2_IRQHandler
20000460 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080003e4  w    F .text	00000002 SPI1_IRQHandler
080003e4  w    F .text	00000002 CAN_SCE_IRQHandler
080007e0  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
080003e4  w    F .text	00000002 TIM6_DAC_IRQHandler
20000520 g     O .bss	00000004 uwTick
08001400 g     F .text	00000028 HAL_SYSTICK_Config
080003e4  w    F .text	00000002 TIM8_UP_IRQHandler
08001670 g       .init_array	00000000 __exidx_start
0800162c g     O .rodata	00000004 _global_impure_ptr
080001c8 g     F .text	00000048 __libc_init_array
080003e4  w    F .text	00000002 DMA2_Channel2_IRQHandler
080003e4  w    F .text	00000002 DMA1_Channel4_IRQHandler
08001614 g     F .text	00000000 _init
080003e4  w    F .text	00000002 USART3_IRQHandler
080002d4 g     F .text	0000002c __libc_fini_array
08001650 g     O .rodata	00000010 aPredivFactorTable
20000524 g       .bss	00000000 _ebss
080003e4  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000394  w    F .text	00000038 Reset_Handler
08000948 g     F .text	000000bc TIM_Base_SetConfig
080003e4  w    F .text	00000002 UART5_IRQHandler
08000774 g     F .text	0000006c HAL_TIM_Base_Start_IT
080003e4  w    F .text	00000002 ADC3_IRQHandler
20000438 g     O .data	00000004 uwTickPrio
08000ab0 g     F .text	00000024 HAL_Init
080003e4  w    F .text	00000002 TIM4_IRQHandler
080003e4  w    F .text	00000002 CAN_RX1_IRQHandler
080003e4  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000550 g     F .text	000000d4 HAL_GPIO_EXTI_Callback
20000528 g       ._user_heap_stack	00000000 end
080003e4  w    F .text	00000002 I2C1_EV_IRQHandler
08000304 g     F .text	00000002 __retarget_lock_release_recursive
20000480 g     O .bss	00000050 C
0800153c g     F .text	0000001c BSP_LED_On
080003e4  w    F .text	00000002 DMA1_Channel6_IRQHandler
080003e4  w    F .text	00000002 UART4_IRQHandler
080003e4  w    F .text	00000002 DMA2_Channel4_IRQHandler
20000524 g       .bss	00000000 __bss_end__
080006d0 g     F .text	0000000c TIM3_IRQHandler
080003e4  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080003e4  w    F .text	00000002 DMA1_Channel1_IRQHandler
080003e4 g       .text	00000002 Default_Handler
08001630 g     O .rodata	00000010 AHBPrescTable
080003e4  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
080003e4  w    F .text	00000002 EXTI15_10_IRQHandler
08000308 g     F .text	0000008c __register_exitproc
08001204 g     F .text	00000158 HAL_RCC_ClockConfig
0800135c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
080003e4  w    F .text	00000002 TIM7_IRQHandler
08001640 g     O .rodata	00000010 aPLLMULFactorTable
08000a04 g     F .text	00000060 HAL_TIM_Base_Init
080004c8 g     F .text	00000088 HAL_TIM_PeriodElapsedCallback
080003e4  w    F .text	00000002 EXTI9_5_IRQHandler
080003e4  w    F .text	00000002 RTC_WKUP_IRQHandler
08000ad4  w    F .text	0000000c HAL_GetTick
080003e4  w    F .text	00000002 SPI2_IRQHandler
08000300 g     F .text	00000002 __retarget_lock_acquire_recursive
080003e4  w    F .text	00000002 USB_LP_CAN_RX0_IRQHandler
08000210 g     F .text	000000a4 memset
080006c0 g     F .text	00000002 MemManage_Handler
080003f0 g     F .text	000000d8 main
080006e2  w    F .text	00000002 HAL_TIM_Base_MspDeInit
08001adc g       *ABS*	00000000 _siccmram
080006c6 g     F .text	00000002 SVC_Handler
080003e4  w    F .text	00000002 DMA2_Channel5_IRQHandler
080007e2  w    F .text	00000002 HAL_TIM_IC_CaptureCallback
080003e4  w    F .text	00000002 DMA1_Channel5_IRQHandler
080003e4  w    F .text	00000002 USB_LP_IRQHandler
080003e4  w    F .text	00000002 EXTI4_IRQHandler
20000440 g     O .data	00000020 LED_PORT
08000624 g     F .text	00000068 SystemInit
08001620 g     F .text	00000000 _fini
080003e4  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
080007e4  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
080002c8 g     F .text	0000000c atexit
10000000 g       .ccmram	00000000 _eccmram
080003e4  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000a68  w    F .text	00000048 HAL_InitTick
08001660 g     O .rodata	00000010 LED_PIN
080003e4  w    F .text	00000002 ADC4_IRQHandler
0800142c  w    F .text	00000002 HAL_TIMEx_Break2Callback
080003e4  w    F .text	00000002 WWDG_IRQHandler
2000051c g     O .bss	00000004 uwPrescalerValue
080007e6  w    F .text	00000002 HAL_TIM_TriggerCallback
080003e4  w    F .text	00000002 TIM2_IRQHandler
08001574 g     F .text	00000018 BSP_LED_Toggle
080003e4  w    F .text	00000002 COMP7_IRQHandler
2000a000 g       *ABS*	00000000 _estack
080003e4  w    F .text	00000002 COMP1_2_3_IRQHandler
080003e4  w    F .text	00000002 EXTI1_IRQHandler
20000460 g       .data	00000000 _edata
10000000 g       .ccmram	00000000 _sccmram
0800068c g     F .text	00000030 HAL_TIM_Base_MspInit
080003e4  w    F .text	00000002 USART2_IRQHandler
080003e4  w    F .text	00000002 COMP4_5_6_IRQHandler
08000c9c g     F .text	00000504 HAL_RCC_OscConfig
08000000 g     O .isr_vector	00000000 g_pfnVectors
080003e4  w    F .text	00000002 I2C2_ER_IRQHandler
080003e4  w    F .text	00000002 DMA1_Channel2_IRQHandler
08001430 g     F .text	0000010c BSP_LED_Init
080003e4  w    F .text	00000002 TIM8_BRK_IRQHandler
080003e4  w    F .text	00000002 FLASH_IRQHandler
080006c2 g     F .text	00000002 BusFault_Handler
080003e4  w    F .text	00000002 USART1_IRQHandler
080003e4  w    F .text	00000002 SPI3_IRQHandler
200004d0 g     O .bss	0000004c TimHandle
080003e4  w    F .text	00000002 I2C1_ER_IRQHandler
0800142a  w    F .text	00000002 HAL_TIMEx_BreakCallback
2000042c g     O .data	00000002 P
080003e4  w    F .text	00000002 USBWakeUp_IRQHandler
080003e4  w    F .text	00000002 DMA2_Channel3_IRQHandler
080003e4  w    F .text	00000002 EXTI2_TSC_IRQHandler
080003e4  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001614 	.word	0x08001614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000464 	.word	0x20000464
 80001c4:	08001614 	.word	0x08001614

080001c8 <__libc_init_array>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	4e0d      	ldr	r6, [pc, #52]	; (8000200 <__libc_init_array+0x38>)
 80001cc:	4d0d      	ldr	r5, [pc, #52]	; (8000204 <__libc_init_array+0x3c>)
 80001ce:	1b76      	subs	r6, r6, r5
 80001d0:	10b6      	asrs	r6, r6, #2
 80001d2:	d006      	beq.n	80001e2 <__libc_init_array+0x1a>
 80001d4:	2400      	movs	r4, #0
 80001d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80001da:	3401      	adds	r4, #1
 80001dc:	4798      	blx	r3
 80001de:	42a6      	cmp	r6, r4
 80001e0:	d1f9      	bne.n	80001d6 <__libc_init_array+0xe>
 80001e2:	4e09      	ldr	r6, [pc, #36]	; (8000208 <__libc_init_array+0x40>)
 80001e4:	4d09      	ldr	r5, [pc, #36]	; (800020c <__libc_init_array+0x44>)
 80001e6:	1b76      	subs	r6, r6, r5
 80001e8:	f001 fa14 	bl	8001614 <_init>
 80001ec:	10b6      	asrs	r6, r6, #2
 80001ee:	d006      	beq.n	80001fe <__libc_init_array+0x36>
 80001f0:	2400      	movs	r4, #0
 80001f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80001f6:	3401      	adds	r4, #1
 80001f8:	4798      	blx	r3
 80001fa:	42a6      	cmp	r6, r4
 80001fc:	d1f9      	bne.n	80001f2 <__libc_init_array+0x2a>
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	08001670 	.word	0x08001670
 8000204:	08001670 	.word	0x08001670
 8000208:	08001678 	.word	0x08001678
 800020c:	08001670 	.word	0x08001670

08000210 <memset>:
 8000210:	0783      	lsls	r3, r0, #30
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	d048      	beq.n	80002a8 <memset+0x98>
 8000216:	1e54      	subs	r4, r2, #1
 8000218:	2a00      	cmp	r2, #0
 800021a:	d03f      	beq.n	800029c <memset+0x8c>
 800021c:	b2ca      	uxtb	r2, r1
 800021e:	4603      	mov	r3, r0
 8000220:	e001      	b.n	8000226 <memset+0x16>
 8000222:	3c01      	subs	r4, #1
 8000224:	d33a      	bcc.n	800029c <memset+0x8c>
 8000226:	f803 2b01 	strb.w	r2, [r3], #1
 800022a:	079d      	lsls	r5, r3, #30
 800022c:	d1f9      	bne.n	8000222 <memset+0x12>
 800022e:	2c03      	cmp	r4, #3
 8000230:	d92d      	bls.n	800028e <memset+0x7e>
 8000232:	b2cd      	uxtb	r5, r1
 8000234:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000238:	2c0f      	cmp	r4, #15
 800023a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800023e:	d936      	bls.n	80002ae <memset+0x9e>
 8000240:	f1a4 0210 	sub.w	r2, r4, #16
 8000244:	f022 0c0f 	bic.w	ip, r2, #15
 8000248:	f103 0e20 	add.w	lr, r3, #32
 800024c:	44e6      	add	lr, ip
 800024e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000252:	f103 0210 	add.w	r2, r3, #16
 8000256:	e942 5504 	strd	r5, r5, [r2, #-16]
 800025a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800025e:	3210      	adds	r2, #16
 8000260:	4572      	cmp	r2, lr
 8000262:	d1f8      	bne.n	8000256 <memset+0x46>
 8000264:	f10c 0201 	add.w	r2, ip, #1
 8000268:	f014 0f0c 	tst.w	r4, #12
 800026c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000270:	f004 0c0f 	and.w	ip, r4, #15
 8000274:	d013      	beq.n	800029e <memset+0x8e>
 8000276:	f1ac 0304 	sub.w	r3, ip, #4
 800027a:	f023 0303 	bic.w	r3, r3, #3
 800027e:	3304      	adds	r3, #4
 8000280:	4413      	add	r3, r2
 8000282:	f842 5b04 	str.w	r5, [r2], #4
 8000286:	4293      	cmp	r3, r2
 8000288:	d1fb      	bne.n	8000282 <memset+0x72>
 800028a:	f00c 0403 	and.w	r4, ip, #3
 800028e:	b12c      	cbz	r4, 800029c <memset+0x8c>
 8000290:	b2ca      	uxtb	r2, r1
 8000292:	441c      	add	r4, r3
 8000294:	f803 2b01 	strb.w	r2, [r3], #1
 8000298:	429c      	cmp	r4, r3
 800029a:	d1fb      	bne.n	8000294 <memset+0x84>
 800029c:	bd30      	pop	{r4, r5, pc}
 800029e:	4664      	mov	r4, ip
 80002a0:	4613      	mov	r3, r2
 80002a2:	2c00      	cmp	r4, #0
 80002a4:	d1f4      	bne.n	8000290 <memset+0x80>
 80002a6:	e7f9      	b.n	800029c <memset+0x8c>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4614      	mov	r4, r2
 80002ac:	e7bf      	b.n	800022e <memset+0x1e>
 80002ae:	461a      	mov	r2, r3
 80002b0:	46a4      	mov	ip, r4
 80002b2:	e7e0      	b.n	8000276 <memset+0x66>

080002b4 <register_fini>:
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <register_fini+0xc>)
 80002b6:	b113      	cbz	r3, 80002be <register_fini+0xa>
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <register_fini+0x10>)
 80002ba:	f000 b805 	b.w	80002c8 <atexit>
 80002be:	4770      	bx	lr
 80002c0:	00000000 	.word	0x00000000
 80002c4:	080002d5 	.word	0x080002d5

080002c8 <atexit>:
 80002c8:	2300      	movs	r3, #0
 80002ca:	4601      	mov	r1, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 b81a 	b.w	8000308 <__register_exitproc>

080002d4 <__libc_fini_array>:
 80002d4:	b538      	push	{r3, r4, r5, lr}
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <__libc_fini_array+0x24>)
 80002d8:	4d08      	ldr	r5, [pc, #32]	; (80002fc <__libc_fini_array+0x28>)
 80002da:	1b5b      	subs	r3, r3, r5
 80002dc:	109c      	asrs	r4, r3, #2
 80002de:	d007      	beq.n	80002f0 <__libc_fini_array+0x1c>
 80002e0:	3b04      	subs	r3, #4
 80002e2:	441d      	add	r5, r3
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f855 3904 	ldr.w	r3, [r5], #-4
 80002ea:	4798      	blx	r3
 80002ec:	2c00      	cmp	r4, #0
 80002ee:	d1f9      	bne.n	80002e4 <__libc_fini_array+0x10>
 80002f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002f4:	f001 b994 	b.w	8001620 <_fini>
 80002f8:	0800167c 	.word	0x0800167c
 80002fc:	08001678 	.word	0x08001678

08000300 <__retarget_lock_acquire_recursive>:
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <__retarget_lock_release_recursive>:
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop

08000308 <__register_exitproc>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000390 <__register_exitproc+0x88>
 8000310:	4606      	mov	r6, r0
 8000312:	f8da 0000 	ldr.w	r0, [sl]
 8000316:	4698      	mov	r8, r3
 8000318:	460f      	mov	r7, r1
 800031a:	4691      	mov	r9, r2
 800031c:	f7ff fff0 	bl	8000300 <__retarget_lock_acquire_recursive>
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <__register_exitproc+0x84>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8000328:	b324      	cbz	r4, 8000374 <__register_exitproc+0x6c>
 800032a:	6865      	ldr	r5, [r4, #4]
 800032c:	2d1f      	cmp	r5, #31
 800032e:	dc26      	bgt.n	800037e <__register_exitproc+0x76>
 8000330:	b95e      	cbnz	r6, 800034a <__register_exitproc+0x42>
 8000332:	1c6b      	adds	r3, r5, #1
 8000334:	3502      	adds	r5, #2
 8000336:	f8da 0000 	ldr.w	r0, [sl]
 800033a:	6063      	str	r3, [r4, #4]
 800033c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8000340:	f7ff ffe0 	bl	8000304 <__retarget_lock_release_recursive>
 8000344:	2000      	movs	r0, #0
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800034e:	2301      	movs	r3, #1
 8000350:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8000354:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8000358:	40ab      	lsls	r3, r5
 800035a:	431a      	orrs	r2, r3
 800035c:	2e02      	cmp	r6, #2
 800035e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8000362:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8000366:	d1e4      	bne.n	8000332 <__register_exitproc+0x2a>
 8000368:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800036c:	4313      	orrs	r3, r2
 800036e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8000372:	e7de      	b.n	8000332 <__register_exitproc+0x2a>
 8000374:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8000378:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800037c:	e7d5      	b.n	800032a <__register_exitproc+0x22>
 800037e:	f8da 0000 	ldr.w	r0, [sl]
 8000382:	f7ff ffbf 	bl	8000304 <__retarget_lock_release_recursive>
 8000386:	f04f 30ff 	mov.w	r0, #4294967295
 800038a:	e7dc      	b.n	8000346 <__register_exitproc+0x3e>
 800038c:	0800162c 	.word	0x0800162c
 8000390:	20000428 	.word	0x20000428

08000394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000398:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800039a:	e003      	b.n	80003a4 <LoopCopyDataInit>

0800039c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800039e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003a2:	3104      	adds	r1, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003ac:	d3f6      	bcc.n	800039c <CopyDataInit>
	ldr	r2, =_sbss
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80003b0:	e002      	b.n	80003b8 <LoopFillZerobss>

080003b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003b4:	f842 3b04 	str.w	r3, [r2], #4

080003b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <LoopForever+0x16>)
	cmp	r2, r3
 80003ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003bc:	d3f9      	bcc.n	80003b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003be:	f000 f931 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003c2:	f7ff ff01 	bl	80001c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003c6:	f000 f813 	bl	80003f0 <main>

080003ca <LoopForever>:

LoopForever:
    b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003cc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80003d0:	0800167c 	.word	0x0800167c
	ldr	r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003d8:	20000460 	.word	0x20000460
	ldr	r2, =_sbss
 80003dc:	20000460 	.word	0x20000460
	ldr	r3, = _ebss
 80003e0:	20000524 	.word	0x20000524

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>

080003e6 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80003e6:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED6);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f001 f8a7 	bl	800153c <BSP_LED_On>
  while(1)
 80003ee:	e7fe      	b.n	80003ee <Error_Handler+0x8>

080003f0 <main>:
{
 80003f0:	b530      	push	{r4, r5, lr}
		C.s[i] = 0;
 80003f2:	4d30      	ldr	r5, [pc, #192]	; (80004b4 <main+0xc4>)
{
 80003f4:	b091      	sub	sp, #68	; 0x44
		C.s[i] = 0;
 80003f6:	2221      	movs	r2, #33	; 0x21
 80003f8:	2100      	movs	r1, #0
 80003fa:	4628      	mov	r0, r5
 80003fc:	f7ff ff08 	bl	8000210 <memset>
	C.N = 0;
 8000400:	2400      	movs	r4, #0
		C.Timestamp[i] = 0;
 8000402:	222c      	movs	r2, #44	; 0x2c
 8000404:	2100      	movs	r1, #0
 8000406:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800040a:	f7ff ff01 	bl	8000210 <memset>
	C.N = 0;
 800040e:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
  HAL_Init();
 8000412:	f000 fb4d 	bl	8000ab0 <HAL_Init>
  BSP_LED_Init(LED3);
 8000416:	4620      	mov	r0, r4
 8000418:	f001 f80a 	bl	8001430 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f807 	bl	8001430 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000422:	2002      	movs	r0, #2
 8000424:	f001 f804 	bl	8001430 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000428:	2003      	movs	r0, #3
 800042a:	f001 f801 	bl	8001430 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800042e:	4620      	mov	r0, r4
 8000430:	2101      	movs	r1, #1
 8000432:	f001 f8ab 	bl	800158c <BSP_PB_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043a:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000440:	e9cd 0306 	strd	r0, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000444:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000448:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800044e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000450:	f000 fc24 	bl	8000c9c <HAL_RCC_OscConfig>
 8000454:	b108      	cbz	r0, 800045a <main+0x6a>
  {
    Error_Handler();
 8000456:	f7ff ffc6 	bl	80003e6 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800045a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800046a:	4621      	mov	r1, r4
 800046c:	a801      	add	r0, sp, #4
 800046e:	f000 fec9 	bl	8001204 <HAL_RCC_ClockConfig>
 8000472:	2800      	cmp	r0, #0
 8000474:	d1ef      	bne.n	8000456 <main+0x66>
  uwPrescalerValue = (uint32_t) (SystemCoreClock / 10000) - 1;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <main+0xc8>)
  TimHandle.Instance = TIMx;
 8000478:	4c10      	ldr	r4, [pc, #64]	; (80004bc <main+0xcc>)
  uwPrescalerValue = (uint32_t) (SystemCoreClock / 10000) - 1;
 800047a:	681b      	ldr	r3, [r3, #0]
  TimHandle.Init.ClockDivision = 0;
 800047c:	6120      	str	r0, [r4, #16]
  uwPrescalerValue = (uint32_t) (SystemCoreClock / 10000) - 1;
 800047e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000482:	fbb3 f3f2 	udiv	r3, r3, r2
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <main+0xd0>)
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	60a0      	str	r0, [r4, #8]
  uwPrescalerValue = (uint32_t) (SystemCoreClock / 10000) - 1;
 800048a:	3b01      	subs	r3, #1
 800048c:	6013      	str	r3, [r2, #0]
  TimHandle.Instance = TIMx;
 800048e:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <main+0xd4>)
 8000490:	6022      	str	r2, [r4, #0]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000492:	61a0      	str	r0, [r4, #24]
  TimHandle.Init.Period = 10000 - 1;
 8000494:	f242 720f 	movw	r2, #9999	; 0x270f
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000498:	4620      	mov	r0, r4
  TimHandle.Init.Period = 10000 - 1;
 800049a:	60e2      	str	r2, [r4, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800049c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800049e:	f000 fab1 	bl	8000a04 <HAL_TIM_Base_Init>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d1d7      	bne.n	8000456 <main+0x66>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80004a6:	4620      	mov	r0, r4
 80004a8:	f000 f964 	bl	8000774 <HAL_TIM_Base_Start_IT>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d1d2      	bne.n	8000456 <main+0x66>
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <main+0xc0>
 80004b2:	bf00      	nop
 80004b4:	20000480 	.word	0x20000480
 80004b8:	20000430 	.word	0x20000430
 80004bc:	200004d0 	.word	0x200004d0
 80004c0:	2000051c 	.word	0x2000051c
 80004c4:	40000400 	.word	0x40000400

080004c8 <HAL_TIM_PeriodElapsedCallback>:
{
 80004c8:	b538      	push	{r3, r4, r5, lr}
	C.Timestamp[C.N] = (C.Timestamp[C.N]+1)%86400;
 80004ca:	4c1f      	ldr	r4, [pc, #124]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80004ce:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80004d2:	f103 0108 	add.w	r1, r3, #8
 80004d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80004da:	684a      	ldr	r2, [r1, #4]
 80004dc:	3201      	adds	r2, #1
 80004de:	fbb2 f5f0 	udiv	r5, r2, r0
 80004e2:	fb00 2215 	mls	r2, r0, r5, r2
 80004e6:	604a      	str	r2, [r1, #4]
	if(C.s[C.N]==59)
 80004e8:	5ce2      	ldrb	r2, [r4, r3]
 80004ea:	2a3b      	cmp	r2, #59	; 0x3b
 80004ec:	d11c      	bne.n	8000528 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(C.m[C.N]==59)
 80004ee:	4423      	add	r3, r4
 80004f0:	7ada      	ldrb	r2, [r3, #11]
 80004f2:	2a3b      	cmp	r2, #59	; 0x3b
 80004f4:	d10a      	bne.n	800050c <HAL_TIM_PeriodElapsedCallback+0x44>
			C.h[C.N] = (C.h[C.N]+1)%24;
 80004f6:	7d9a      	ldrb	r2, [r3, #22]
 80004f8:	2118      	movs	r1, #24
 80004fa:	3201      	adds	r2, #1
 80004fc:	fbb2 f0f1 	udiv	r0, r2, r1
 8000500:	fb01 2210 	mls	r2, r1, r0, r2
 8000504:	759a      	strb	r2, [r3, #22]
			BSP_LED_Toggle(LED4);
 8000506:	2001      	movs	r0, #1
 8000508:	f001 f834 	bl	8001574 <BSP_LED_Toggle>
		C.m[C.N] = (C.m[C.N]+1)%60;
 800050c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8000510:	4422      	add	r2, r4
 8000512:	213c      	movs	r1, #60	; 0x3c
 8000514:	7ad3      	ldrb	r3, [r2, #11]
 8000516:	3301      	adds	r3, #1
 8000518:	fbb3 f0f1 	udiv	r0, r3, r1
 800051c:	fb01 3310 	mls	r3, r1, r0, r3
 8000520:	72d3      	strb	r3, [r2, #11]
		BSP_LED_Toggle(LED3);
 8000522:	2000      	movs	r0, #0
 8000524:	f001 f826 	bl	8001574 <BSP_LED_Toggle>
	C.s[C.N] = (C.s[C.N]+1)%60;
 8000528:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800052c:	5ca3      	ldrb	r3, [r4, r2]
 800052e:	213c      	movs	r1, #60	; 0x3c
 8000530:	3301      	adds	r3, #1
 8000532:	fbb3 f0f1 	udiv	r0, r3, r1
 8000536:	fb01 3310 	mls	r3, r1, r0, r3
 800053a:	54a3      	strb	r3, [r4, r2]
	BSP_LED_Toggle(LED5);
 800053c:	2002      	movs	r0, #2
}
 800053e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	BSP_LED_Toggle(LED5);
 8000542:	f001 b817 	b.w	8001574 <BSP_LED_Toggle>
 8000546:	bf00      	nop
 8000548:	20000480 	.word	0x20000480
 800054c:	00015180 	.word	0x00015180

08000550 <HAL_GPIO_EXTI_Callback>:
{
 8000550:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop(&TimHandle);
 8000552:	4830      	ldr	r0, [pc, #192]	; (8000614 <HAL_GPIO_EXTI_Callback+0xc4>)
	C.N = (C.N+1)%11;
 8000554:	4c30      	ldr	r4, [pc, #192]	; (8000618 <HAL_GPIO_EXTI_Callback+0xc8>)
	HAL_TIM_Base_Stop(&TimHandle);
 8000556:	f000 f8f8 	bl	800074a <HAL_TIM_Base_Stop>
    HAL_TIM_Base_DeInit(&TimHandle);
 800055a:	482e      	ldr	r0, [pc, #184]	; (8000614 <HAL_GPIO_EXTI_Callback+0xc4>)
 800055c:	f000 f8c2 	bl	80006e4 <HAL_TIM_Base_DeInit>
	C.N = (C.N+1)%11;
 8000560:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000564:	220b      	movs	r2, #11
 8000566:	3301      	adds	r3, #1
 8000568:	fbb3 f1f2 	udiv	r1, r3, r2
 800056c:	fb02 3311 	mls	r3, r2, r1, r3
 8000570:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if(C.N==0)
 8000574:	4929      	ldr	r1, [pc, #164]	; (800061c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000576:	b1eb      	cbz	r3, 80005b4 <HAL_GPIO_EXTI_Callback+0x64>
		P = 2*P;
 8000578:	880a      	ldrh	r2, [r1, #0]
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	b292      	uxth	r2, r2
 800057e:	800a      	strh	r2, [r1, #0]
	TimHandle.Init.Period = 10000/P - 1;
 8000580:	4924      	ldr	r1, [pc, #144]	; (8000614 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000582:	f242 7010 	movw	r0, #10000	; 0x2710
 8000586:	fbb0 f2f2 	udiv	r2, r0, r2
 800058a:	3a01      	subs	r2, #1
 800058c:	60ca      	str	r2, [r1, #12]
	TimHandle.Init.Prescaler = uwPrescalerValue;
 800058e:	4a24      	ldr	r2, [pc, #144]	; (8000620 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	604a      	str	r2, [r1, #4]
	if(C.N==10)
 8000594:	2b0a      	cmp	r3, #10
	TimHandle.Init.ClockDivision = 0;
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	610a      	str	r2, [r1, #16]
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	608a      	str	r2, [r1, #8]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	618a      	str	r2, [r1, #24]
	if(C.N==10)
 80005a0:	d102      	bne.n	80005a8 <HAL_GPIO_EXTI_Callback+0x58>
		BSP_LED_Toggle(LED6);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 ffe6 	bl	8001574 <BSP_LED_Toggle>
	if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80005a8:	481a      	ldr	r0, [pc, #104]	; (8000614 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005aa:	f000 fa2b 	bl	8000a04 <HAL_TIM_Base_Init>
 80005ae:	b118      	cbz	r0, 80005b8 <HAL_GPIO_EXTI_Callback+0x68>
		Error_Handler();
 80005b0:	f7ff ff19 	bl	80003e6 <Error_Handler>
		P = 1;
 80005b4:	2201      	movs	r2, #1
 80005b6:	e7e2      	b.n	800057e <HAL_GPIO_EXTI_Callback+0x2e>
	if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80005b8:	4816      	ldr	r0, [pc, #88]	; (8000614 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005ba:	f000 f8db 	bl	8000774 <HAL_TIM_Base_Start_IT>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d1f6      	bne.n	80005b0 <HAL_GPIO_EXTI_Callback+0x60>
	C.s[C.N-1]%2 == 0 ? BSP_LED_Off(LED5) : BSP_LED_On(LED5);
 80005c2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80005c6:	4423      	add	r3, r4
 80005c8:	2002      	movs	r0, #2
 80005ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80005ce:	07da      	lsls	r2, r3, #31
 80005d0:	d415      	bmi.n	80005fe <HAL_GPIO_EXTI_Callback+0xae>
 80005d2:	f000 ffc1 	bl	8001558 <BSP_LED_Off>
	C.m[C.N-1]%2 == 0 ? BSP_LED_Off(LED4) : BSP_LED_On(LED4);
 80005d6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80005da:	4423      	add	r3, r4
 80005dc:	2001      	movs	r0, #1
 80005de:	7a9b      	ldrb	r3, [r3, #10]
 80005e0:	07db      	lsls	r3, r3, #31
 80005e2:	d40f      	bmi.n	8000604 <HAL_GPIO_EXTI_Callback+0xb4>
 80005e4:	f000 ffb8 	bl	8001558 <BSP_LED_Off>
	C.h[C.N-1]%2 == 0 ? BSP_LED_Off(LED3) : BSP_LED_On(LED3);
 80005e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80005ec:	441c      	add	r4, r3
 80005ee:	7d60      	ldrb	r0, [r4, #21]
 80005f0:	f010 0001 	ands.w	r0, r0, #1
 80005f4:	d109      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0xba>
}
 80005f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	C.h[C.N-1]%2 == 0 ? BSP_LED_Off(LED3) : BSP_LED_On(LED3);
 80005fa:	f000 bfad 	b.w	8001558 <BSP_LED_Off>
	C.s[C.N-1]%2 == 0 ? BSP_LED_Off(LED5) : BSP_LED_On(LED5);
 80005fe:	f000 ff9d 	bl	800153c <BSP_LED_On>
 8000602:	e7e8      	b.n	80005d6 <HAL_GPIO_EXTI_Callback+0x86>
	C.m[C.N-1]%2 == 0 ? BSP_LED_Off(LED4) : BSP_LED_On(LED4);
 8000604:	f000 ff9a 	bl	800153c <BSP_LED_On>
 8000608:	e7ee      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x98>
}
 800060a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	C.h[C.N-1]%2 == 0 ? BSP_LED_Off(LED3) : BSP_LED_On(LED3);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 bf94 	b.w	800153c <BSP_LED_On>
 8000614:	200004d0 	.word	0x200004d0
 8000618:	20000480 	.word	0x20000480
 800061c:	2000042c 	.word	0x2000042c
 8000620:	2000051c 	.word	0x2000051c

08000624 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	4915      	ldr	r1, [pc, #84]	; (800067c <SystemInit+0x58>)
 8000626:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800062a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <SystemInit+0x5c>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800063c:	6858      	ldr	r0, [r3, #4]
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <SystemInit+0x60>)
 8000640:	4002      	ands	r2, r0
 8000642:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800064a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800064e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000656:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800065e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000662:	f022 020f 	bic.w	r2, r2, #15
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemInit+0x64>)
 800066c:	4002      	ands	r2, r0
 800066e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000678:	608b      	str	r3, [r1, #8]
#endif
}
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	40021000 	.word	0x40021000
 8000684:	f87fc00c 	.word	0xf87fc00c
 8000688:	ff00fccc 	.word	0xff00fccc

0800068c <HAL_TIM_Base_MspInit>:
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_TIM_Base_MspInit+0x2c>)
{
 800068e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000690:	69da      	ldr	r2, [r3, #28]
 8000692:	f042 0202 	orr.w	r2, r2, #2
 8000696:	61da      	str	r2, [r3, #28]
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	9301      	str	r3, [sp, #4]
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */ 
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	201d      	movs	r0, #29
  __HAL_RCC_TIM3_CLK_ENABLE();
 80006a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80006a8:	f000 fe6a 	bl	8001380 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80006ac:	201d      	movs	r0, #29
}
 80006ae:	b003      	add	sp, #12
 80006b0:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80006b4:	f000 be96 	b.w	80013e4 <HAL_NVIC_EnableIRQ>
 80006b8:	40021000 	.word	0x40021000

080006bc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80006bc:	4770      	bx	lr

080006be <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler>

080006c0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler>

080006c2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler>

080006c4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler>

080006c6 <SVC_Handler>:
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:
 80006cc:	4770      	bx	lr
	...

080006d0 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <TIM3_IRQHandler+0x8>)
 80006d2:	f000 b889 	b.w	80007e8 <HAL_TIM_IRQHandler>
 80006d6:	bf00      	nop
 80006d8:	200004d0 	.word	0x200004d0

080006dc <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 bad1 	b.w	8000c84 <HAL_GPIO_EXTI_IRQHandler>

080006e2 <HAL_TIM_Base_MspDeInit>:
 80006e2:	4770      	bx	lr

080006e4 <HAL_TIM_Base_DeInit>:
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80006e4:	2302      	movs	r3, #2
{
 80006e6:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80006e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	6a19      	ldr	r1, [r3, #32]
 80006f0:	f241 1211 	movw	r2, #4369	; 0x1111
 80006f4:	4211      	tst	r1, r2
{
 80006f6:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 80006f8:	d108      	bne.n	800070c <HAL_TIM_Base_DeInit+0x28>
 80006fa:	6a19      	ldr	r1, [r3, #32]
 80006fc:	f240 4244 	movw	r2, #1092	; 0x444
 8000700:	4211      	tst	r1, r2
 8000702:	bf02      	ittt	eq
 8000704:	681a      	ldreq	r2, [r3, #0]
 8000706:	f022 0201 	biceq.w	r2, r2, #1
 800070a:	601a      	streq	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800070c:	4620      	mov	r0, r4
 800070e:	f7ff ffe8 	bl	80006e2 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8000712:	2000      	movs	r0, #0
 8000714:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8000718:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800071c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8000720:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 8000724:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8000728:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 800072c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8000730:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8000734:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8000738:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 800073c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8000740:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 8000744:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  return HAL_OK;
}
 8000748:	bd10      	pop	{r4, pc}

0800074a <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	6a19      	ldr	r1, [r3, #32]
 800074e:	f241 1211 	movw	r2, #4369	; 0x1111
 8000752:	4211      	tst	r1, r2
 8000754:	d108      	bne.n	8000768 <HAL_TIM_Base_Stop+0x1e>
 8000756:	6a19      	ldr	r1, [r3, #32]
 8000758:	f240 4244 	movw	r2, #1092	; 0x444
 800075c:	4211      	tst	r1, r2
 800075e:	bf02      	ittt	eq
 8000760:	681a      	ldreq	r2, [r3, #0]
 8000762:	f022 0201 	biceq.w	r2, r2, #1
 8000766:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8000768:	2301      	movs	r3, #1
 800076a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800076e:	2000      	movs	r0, #0
 8000770:	4770      	bx	lr
	...

08000774 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000774:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000778:	2b01      	cmp	r3, #1
 800077a:	d12b      	bne.n	80007d4 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800077c:	2302      	movs	r3, #2
 800077e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000782:	6803      	ldr	r3, [r0, #0]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <HAL_TIM_Base_Start_IT+0x64>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d012      	beq.n	80007b8 <HAL_TIM_Base_Start_IT+0x44>
 8000792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000796:	d00f      	beq.n	80007b8 <HAL_TIM_Base_Start_IT+0x44>
 8000798:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800079c:	4293      	cmp	r3, r2
 800079e:	d00b      	beq.n	80007b8 <HAL_TIM_Base_Start_IT+0x44>
 80007a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d007      	beq.n	80007b8 <HAL_TIM_Base_Start_IT+0x44>
 80007a8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d003      	beq.n	80007b8 <HAL_TIM_Base_Start_IT+0x44>
 80007b0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d107      	bne.n	80007c8 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80007b8:	6899      	ldr	r1, [r3, #8]
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_TIM_Base_Start_IT+0x68>)
 80007bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80007be:	2a06      	cmp	r2, #6
 80007c0:	d006      	beq.n	80007d0 <HAL_TIM_Base_Start_IT+0x5c>
 80007c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80007c6:	d003      	beq.n	80007d0 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f042 0201 	orr.w	r2, r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80007d0:	2000      	movs	r0, #0
}
 80007d2:	4770      	bx	lr
    return HAL_ERROR;
 80007d4:	2001      	movs	r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	00010007 	.word	0x00010007

080007e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80007e0:	4770      	bx	lr

080007e2 <HAL_TIM_IC_CaptureCallback>:
 80007e2:	4770      	bx	lr

080007e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80007e4:	4770      	bx	lr

080007e6 <HAL_TIM_TriggerCallback>:
 80007e6:	4770      	bx	lr

080007e8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	691a      	ldr	r2, [r3, #16]
 80007ec:	0791      	lsls	r1, r2, #30
{
 80007ee:	b510      	push	{r4, lr}
 80007f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80007f2:	d50f      	bpl.n	8000814 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	0792      	lsls	r2, r2, #30
 80007f8:	d50c      	bpl.n	8000814 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80007fa:	f06f 0202 	mvn.w	r2, #2
 80007fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000800:	2201      	movs	r2, #1
 8000802:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	0799      	lsls	r1, r3, #30
 8000808:	f000 8085 	beq.w	8000916 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800080c:	f7ff ffe9 	bl	80007e2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000810:	2300      	movs	r3, #0
 8000812:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	0752      	lsls	r2, r2, #29
 800081a:	d510      	bpl.n	800083e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	0750      	lsls	r0, r2, #29
 8000820:	d50d      	bpl.n	800083e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000822:	f06f 0204 	mvn.w	r2, #4
 8000826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000828:	2202      	movs	r2, #2
 800082a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000832:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000834:	d075      	beq.n	8000922 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000836:	f7ff ffd4 	bl	80007e2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800083a:	2300      	movs	r3, #0
 800083c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	691a      	ldr	r2, [r3, #16]
 8000842:	0711      	lsls	r1, r2, #28
 8000844:	d50f      	bpl.n	8000866 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	0712      	lsls	r2, r2, #28
 800084a:	d50c      	bpl.n	8000866 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800084c:	f06f 0208 	mvn.w	r2, #8
 8000850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000852:	2204      	movs	r2, #4
 8000854:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800085a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800085c:	d067      	beq.n	800092e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800085e:	f7ff ffc0 	bl	80007e2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000862:	2300      	movs	r3, #0
 8000864:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	691a      	ldr	r2, [r3, #16]
 800086a:	06d0      	lsls	r0, r2, #27
 800086c:	d510      	bpl.n	8000890 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	06d1      	lsls	r1, r2, #27
 8000872:	d50d      	bpl.n	8000890 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000874:	f06f 0210 	mvn.w	r2, #16
 8000878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800087a:	2208      	movs	r2, #8
 800087c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000884:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000886:	d058      	beq.n	800093a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000888:	f7ff ffab 	bl	80007e2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800088c:	2300      	movs	r3, #0
 800088e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	07d2      	lsls	r2, r2, #31
 8000896:	d508      	bpl.n	80008aa <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	07d0      	lsls	r0, r2, #31
 800089c:	d505      	bpl.n	80008aa <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800089e:	f06f 0201 	mvn.w	r2, #1
 80008a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80008a4:	4620      	mov	r0, r4
 80008a6:	f7ff fe0f 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	0611      	lsls	r1, r2, #24
 80008b0:	d508      	bpl.n	80008c4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	0612      	lsls	r2, r2, #24
 80008b6:	d505      	bpl.n	80008c4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80008b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80008bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80008be:	4620      	mov	r0, r4
 80008c0:	f000 fdb3 	bl	800142a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	05d0      	lsls	r0, r2, #23
 80008ca:	d508      	bpl.n	80008de <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	0611      	lsls	r1, r2, #24
 80008d0:	d505      	bpl.n	80008de <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80008d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80008d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80008d8:	4620      	mov	r0, r4
 80008da:	f000 fda7 	bl	800142c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	0652      	lsls	r2, r2, #25
 80008e4:	d508      	bpl.n	80008f8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	0650      	lsls	r0, r2, #25
 80008ea:	d505      	bpl.n	80008f8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80008ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80008f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff ff77 	bl	80007e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	0691      	lsls	r1, r2, #26
 80008fe:	d522      	bpl.n	8000946 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	0692      	lsls	r2, r2, #26
 8000904:	d51f      	bpl.n	8000946 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000906:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800090a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800090c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800090e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000912:	f000 bd89 	b.w	8001428 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000916:	f7ff ff63 	bl	80007e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff ff62 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000920:	e776      	b.n	8000810 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000922:	f7ff ff5d 	bl	80007e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000926:	4620      	mov	r0, r4
 8000928:	f7ff ff5c 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800092c:	e785      	b.n	800083a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800092e:	f7ff ff57 	bl	80007e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000932:	4620      	mov	r0, r4
 8000934:	f7ff ff56 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000938:	e793      	b.n	8000862 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800093a:	f7ff ff51 	bl	80007e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800093e:	4620      	mov	r0, r4
 8000940:	f7ff ff50 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000944:	e7a2      	b.n	800088c <HAL_TIM_IRQHandler+0xa4>
}
 8000946:	bd10      	pop	{r4, pc}

08000948 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000948:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 800094a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800094c:	4290      	cmp	r0, r2
 800094e:	d00e      	beq.n	800096e <TIM_Base_SetConfig+0x26>
 8000950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000954:	d00b      	beq.n	800096e <TIM_Base_SetConfig+0x26>
 8000956:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800095a:	4290      	cmp	r0, r2
 800095c:	d007      	beq.n	800096e <TIM_Base_SetConfig+0x26>
 800095e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000962:	4290      	cmp	r0, r2
 8000964:	d003      	beq.n	800096e <TIM_Base_SetConfig+0x26>
 8000966:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800096a:	4290      	cmp	r0, r2
 800096c:	d115      	bne.n	800099a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800096e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000974:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000976:	4a21      	ldr	r2, [pc, #132]	; (80009fc <TIM_Base_SetConfig+0xb4>)
 8000978:	4290      	cmp	r0, r2
 800097a:	d019      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 800097c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000980:	d016      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 8000982:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000986:	4290      	cmp	r0, r2
 8000988:	d012      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 800098a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800098e:	4290      	cmp	r0, r2
 8000990:	d00e      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 8000992:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000996:	4290      	cmp	r0, r2
 8000998:	d00a      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <TIM_Base_SetConfig+0xb8>)
 800099c:	4290      	cmp	r0, r2
 800099e:	d007      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 80009a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009a4:	4290      	cmp	r0, r2
 80009a6:	d003      	beq.n	80009b0 <TIM_Base_SetConfig+0x68>
 80009a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009ac:	4290      	cmp	r0, r2
 80009ae:	d103      	bne.n	80009b8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80009b0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80009b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80009b6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80009b8:	694a      	ldr	r2, [r1, #20]
 80009ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009be:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80009c0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80009c2:	688b      	ldr	r3, [r1, #8]
 80009c4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80009c6:	680b      	ldr	r3, [r1, #0]
 80009c8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <TIM_Base_SetConfig+0xb4>)
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d00f      	beq.n	80009f0 <TIM_Base_SetConfig+0xa8>
 80009d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d00b      	beq.n	80009f0 <TIM_Base_SetConfig+0xa8>
 80009d8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80009dc:	4298      	cmp	r0, r3
 80009de:	d007      	beq.n	80009f0 <TIM_Base_SetConfig+0xa8>
 80009e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d003      	beq.n	80009f0 <TIM_Base_SetConfig+0xa8>
 80009e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ec:	4298      	cmp	r0, r3
 80009ee:	d101      	bne.n	80009f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80009f0:	690b      	ldr	r3, [r1, #16]
 80009f2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80009f4:	2301      	movs	r3, #1
 80009f6:	6143      	str	r3, [r0, #20]
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40012c00 	.word	0x40012c00
 8000a00:	40014000 	.word	0x40014000

08000a04 <HAL_TIM_Base_Init>:
{
 8000a04:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000a06:	4604      	mov	r4, r0
 8000a08:	b350      	cbz	r0, 8000a60 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000a0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a12:	b91b      	cbnz	r3, 8000a1c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000a14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000a18:	f7ff fe38 	bl	800068c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000a1c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000a1e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000a20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000a24:	1d21      	adds	r1, r4, #4
 8000a26:	f7ff ff8f 	bl	8000948 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8000a30:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000a36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8000a3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000a3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8000a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8000a56:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8000a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8000a5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a60:	2001      	movs	r0, #1
 8000a62:	e7fc      	b.n	8000a5e <HAL_TIM_Base_Init+0x5a>

08000a64 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_InitTick+0x3c>)
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_InitTick+0x40>)
{
 8000a6e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	7818      	ldrb	r0, [r3, #0]
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a7a:	6810      	ldr	r0, [r2, #0]
 8000a7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a80:	f000 fcbe 	bl	8001400 <HAL_SYSTICK_Config>
 8000a84:	4604      	mov	r4, r0
 8000a86:	b958      	cbnz	r0, 8000aa0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	2d0f      	cmp	r5, #15
 8000a8a:	d809      	bhi.n	8000aa0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4629      	mov	r1, r5
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 fc74 	bl	8001380 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_InitTick+0x44>)
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	e7fc      	b.n	8000a9e <HAL_InitTick+0x36>
 8000aa4:	20000430 	.word	0x20000430
 8000aa8:	20000434 	.word	0x20000434
 8000aac:	20000438 	.word	0x20000438

08000ab0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x20>)
{
 8000ab2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	6813      	ldr	r3, [r2, #0]
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fc4d 	bl	800135c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff ffd0 	bl	8000a68 <HAL_InitTick>
  HAL_MspInit();
 8000ac8:	f7ff ffcc 	bl	8000a64 <HAL_MspInit>
}
 8000acc:	2000      	movs	r0, #0
 8000ace:	bd08      	pop	{r3, pc}
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ad4:	4b01      	ldr	r3, [pc, #4]	; (8000adc <HAL_GetTick+0x8>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000520 	.word	0x20000520

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae4:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000c64 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae8:	4c5c      	ldr	r4, [pc, #368]	; (8000c5c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af0:	680a      	ldr	r2, [r1, #0]
 8000af2:	fa32 f503 	lsrs.w	r5, r2, r3
 8000af6:	d102      	bne.n	8000afe <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000af8:	b003      	add	sp, #12
 8000afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000afe:	fa09 fc03 	lsl.w	ip, r9, r3
    if (iocurrent != 0x00u)
 8000b02:	ea1c 0202 	ands.w	r2, ip, r2
 8000b06:	f000 809f 	beq.w	8000c48 <HAL_GPIO_Init+0x168>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0a:	684d      	ldr	r5, [r1, #4]
 8000b0c:	f025 0a10 	bic.w	sl, r5, #16
 8000b10:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b14:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b16:	f10a 37ff 	add.w	r7, sl, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b1a:	fa06 f60e 	lsl.w	r6, r6, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b20:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	d811      	bhi.n	8000b4a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8000b26:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b28:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	68cf      	ldr	r7, [r1, #12]
 8000b2e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b32:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000b36:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b38:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b3e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000b42:	409f      	lsls	r7, r3
 8000b44:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000b48:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b4a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b4c:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b50:	688f      	ldr	r7, [r1, #8]
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5a:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8000b5e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b60:	d116      	bne.n	8000b90 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000b62:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b66:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000b6e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b72:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b76:	f04f 0c0f 	mov.w	ip, #15
 8000b7a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b7e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	690f      	ldr	r7, [r1, #16]
 8000b84:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b88:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000b8c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b90:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b92:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b94:	f005 0703 	and.w	r7, r5, #3
 8000b98:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b9c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b9e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba0:	00ee      	lsls	r6, r5, #3
 8000ba2:	d551      	bpl.n	8000c48 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000ba8:	f046 0601 	orr.w	r6, r6, #1
 8000bac:	f8c8 6018 	str.w	r6, [r8, #24]
 8000bb0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000bb4:	f023 0703 	bic.w	r7, r3, #3
 8000bb8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bbc:	f006 0601 	and.w	r6, r6, #1
 8000bc0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000bc4:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc6:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bd2:	f04f 0c0f 	mov.w	ip, #15
 8000bd6:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bda:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bde:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be2:	d033      	beq.n	8000c4c <HAL_GPIO_Init+0x16c>
 8000be4:	4e1e      	ldr	r6, [pc, #120]	; (8000c60 <HAL_GPIO_Init+0x180>)
 8000be6:	42b0      	cmp	r0, r6
 8000be8:	d032      	beq.n	8000c50 <HAL_GPIO_Init+0x170>
 8000bea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bee:	42b0      	cmp	r0, r6
 8000bf0:	d030      	beq.n	8000c54 <HAL_GPIO_Init+0x174>
 8000bf2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf6:	42b0      	cmp	r0, r6
 8000bf8:	d02e      	beq.n	8000c58 <HAL_GPIO_Init+0x178>
 8000bfa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bfe:	42b0      	cmp	r0, r6
 8000c00:	bf0c      	ite	eq
 8000c02:	2604      	moveq	r6, #4
 8000c04:	2605      	movne	r6, #5
 8000c06:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c0a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c10:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000c12:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000c18:	bf0c      	ite	eq
 8000c1a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c1c:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000c1e:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000c20:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c22:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000c26:	bf0c      	ite	eq
 8000c28:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c2a:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000c2c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000c2e:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c30:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000c34:	bf0c      	ite	eq
 8000c36:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c38:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000c3a:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000c3c:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3e:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8000c40:	bf54      	ite	pl
 8000c42:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000c44:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000c46:	60e6      	str	r6, [r4, #12]
    position++;
 8000c48:	3301      	adds	r3, #1
 8000c4a:	e751      	b.n	8000af0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e7da      	b.n	8000c06 <HAL_GPIO_Init+0x126>
 8000c50:	2601      	movs	r6, #1
 8000c52:	e7d8      	b.n	8000c06 <HAL_GPIO_Init+0x126>
 8000c54:	2602      	movs	r6, #2
 8000c56:	e7d6      	b.n	8000c06 <HAL_GPIO_Init+0x126>
 8000c58:	2603      	movs	r6, #3
 8000c5a:	e7d4      	b.n	8000c06 <HAL_GPIO_Init+0x126>
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	48000400 	.word	0x48000400
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c68:	b10a      	cbz	r2, 8000c6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c6a:	6181      	str	r1, [r0, #24]
 8000c6c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000c70:	4770      	bx	lr

08000c72 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c72:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c74:	ea01 0203 	and.w	r2, r1, r3
 8000c78:	ea21 0103 	bic.w	r1, r1, r3
 8000c7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c80:	6181      	str	r1, [r0, #24]
}
 8000c82:	4770      	bx	lr

08000c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000c86:	6951      	ldr	r1, [r2, #20]
 8000c88:	4201      	tst	r1, r0
{
 8000c8a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c8c:	d002      	beq.n	8000c94 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c8e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c90:	f7ff fc5e 	bl	8000550 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c94:	bd08      	pop	{r3, pc}
 8000c96:	bf00      	nop
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d035      	beq.n	8000d12 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	6803      	ldr	r3, [r0, #0]
 8000ca8:	07da      	lsls	r2, r3, #31
 8000caa:	d411      	bmi.n	8000cd0 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	079b      	lsls	r3, r3, #30
 8000cb0:	f100 8088 	bmi.w	8000dc4 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	071c      	lsls	r4, r3, #28
 8000cb8:	f100 80f8 	bmi.w	8000eac <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	0758      	lsls	r0, r3, #29
 8000cc0:	f100 8146 	bmi.w	8000f50 <HAL_RCC_OscConfig+0x2b4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cc4:	69e8      	ldr	r0, [r5, #28]
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	f040 81d4 	bne.w	8001074 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }

  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e04b      	b.n	8000d68 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd0:	4c9d      	ldr	r4, [pc, #628]	; (8000f48 <HAL_RCC_OscConfig+0x2ac>)
 8000cd2:	6863      	ldr	r3, [r4, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d007      	beq.n	8000cec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cdc:	6863      	ldr	r3, [r4, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d117      	bne.n	8000d16 <HAL_RCC_OscConfig+0x7a>
 8000ce6:	6863      	ldr	r3, [r4, #4]
 8000ce8:	03df      	lsls	r7, r3, #15
 8000cea:	d514      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	6821      	ldr	r1, [r4, #0]
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2201      	movs	r2, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	420b      	tst	r3, r1
 8000d0a:	d0cf      	beq.n	8000cac <HAL_RCC_OscConfig+0x10>
 8000d0c:	686b      	ldr	r3, [r5, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1cc      	bne.n	8000cac <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000d12:	2001      	movs	r0, #1
 8000d14:	e028      	b.n	8000d68 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	686a      	ldr	r2, [r5, #4]
 8000d18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000d1c:	d127      	bne.n	8000d6e <HAL_RCC_OscConfig+0xd2>
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d28:	68a9      	ldr	r1, [r5, #8]
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d32:	b362      	cbz	r2, 8000d8e <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000d34:	f7ff fece 	bl	8000ad4 <HAL_GetTick>
 8000d38:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000d3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	f04f 0801 	mov.w	r8, #1
 8000d42:	fa97 f3a7 	rbit	r3, r7
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	fa97 f3a7 	rbit	r3, r7
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	fa08 f303 	lsl.w	r3, r8, r3
 8000d58:	4213      	tst	r3, r2
 8000d5a:	d1a7      	bne.n	8000cac <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff feba 	bl	8000ad4 <HAL_GetTick>
 8000d60:	1b83      	subs	r3, r0, r6
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d9ed      	bls.n	8000d42 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8000d66:	2003      	movs	r0, #3
}
 8000d68:	b003      	add	sp, #12
 8000d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	b932      	cbnz	r2, 8000d80 <HAL_RCC_OscConfig+0xe4>
 8000d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d76:	6023      	str	r3, [r4, #0]
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	e7d1      	b.n	8000d24 <HAL_RCC_OscConfig+0x88>
 8000d80:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000d84:	d1f5      	bne.n	8000d72 <HAL_RCC_OscConfig+0xd6>
 8000d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	e7c7      	b.n	8000d1e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fea1 	bl	8000ad4 <HAL_GetTick>
 8000d92:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000d96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d98:	f04f 0801 	mov.w	r8, #1
 8000d9c:	fa97 f3a7 	rbit	r3, r7
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	fa97 f3a7 	rbit	r3, r7
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	fa08 f303 	lsl.w	r3, r8, r3
 8000db2:	4213      	tst	r3, r2
 8000db4:	f43f af7a 	beq.w	8000cac <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fe8c 	bl	8000ad4 <HAL_GetTick>
 8000dbc:	1b83      	subs	r3, r0, r6
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d9ec      	bls.n	8000d9c <HAL_RCC_OscConfig+0x100>
 8000dc2:	e7d0      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dc4:	4c60      	ldr	r4, [pc, #384]	; (8000f48 <HAL_RCC_OscConfig+0x2ac>)
 8000dc6:	6863      	ldr	r3, [r4, #4]
 8000dc8:	f013 0f0c 	tst.w	r3, #12
 8000dcc:	d007      	beq.n	8000dde <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dce:	6863      	ldr	r3, [r4, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d121      	bne.n	8000e1c <HAL_RCC_OscConfig+0x180>
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	03de      	lsls	r6, r3, #15
 8000ddc:	d41e      	bmi.n	8000e1c <HAL_RCC_OscConfig+0x180>
 8000dde:	2302      	movs	r3, #2
 8000de0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de4:	6821      	ldr	r1, [r4, #0]
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	2201      	movs	r2, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	420b      	tst	r3, r1
 8000dfa:	d002      	beq.n	8000e02 <HAL_RCC_OscConfig+0x166>
 8000dfc:	692b      	ldr	r3, [r5, #16]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d187      	bne.n	8000d12 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e02:	6821      	ldr	r1, [r4, #0]
 8000e04:	23f8      	movs	r3, #248	; 0xf8
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	fab3 f283 	clz	r2, r3
 8000e0e:	696b      	ldr	r3, [r5, #20]
 8000e10:	4093      	lsls	r3, r2
 8000e12:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000e16:	4313      	orrs	r3, r2
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	e74b      	b.n	8000cb4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1c:	692a      	ldr	r2, [r5, #16]
 8000e1e:	2601      	movs	r6, #1
 8000e20:	b30a      	cbz	r2, 8000e66 <HAL_RCC_OscConfig+0x1ca>
 8000e22:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	f04f 0802 	mov.w	r8, #2
 8000e38:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fe4b 	bl	8000ad4 <HAL_GetTick>
 8000e3e:	4607      	mov	r7, r0
 8000e40:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e44:	6822      	ldr	r2, [r4, #0]
 8000e46:	fa98 f3a8 	rbit	r3, r8
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	fa06 f303 	lsl.w	r3, r6, r3
 8000e56:	4213      	tst	r3, r2
 8000e58:	d1d3      	bne.n	8000e02 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fe3b 	bl	8000ad4 <HAL_GetTick>
 8000e5e:	1bc3      	subs	r3, r0, r7
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d9ed      	bls.n	8000e40 <HAL_RCC_OscConfig+0x1a4>
 8000e64:	e77f      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
 8000e66:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f04f 0802 	mov.w	r8, #2
 8000e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fe29 	bl	8000ad4 <HAL_GetTick>
 8000e82:	4607      	mov	r7, r0
 8000e84:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e88:	6822      	ldr	r2, [r4, #0]
 8000e8a:	fa98 f3a8 	rbit	r3, r8
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	fa06 f303 	lsl.w	r3, r6, r3
 8000e9a:	4213      	tst	r3, r2
 8000e9c:	f43f af0a 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fe18 	bl	8000ad4 <HAL_GetTick>
 8000ea4:	1bc3      	subs	r3, r0, r7
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d9ec      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1e8>
 8000eaa:	e75c      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eac:	69aa      	ldr	r2, [r5, #24]
 8000eae:	4e26      	ldr	r6, [pc, #152]	; (8000f48 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	4926      	ldr	r1, [pc, #152]	; (8000f4c <HAL_RCC_OscConfig+0x2b0>)
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	b31a      	cbz	r2, 8000efe <HAL_RCC_OscConfig+0x262>
 8000eb6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	2702      	movs	r7, #2
 8000ec4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fe05 	bl	8000ad4 <HAL_GetTick>
 8000eca:	4680      	mov	r8, r0
 8000ecc:	fa97 f3a7 	rbit	r3, r7
 8000ed0:	fa97 f3a7 	rbit	r3, r7
 8000ed4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000eda:	fa97 f3a7 	rbit	r3, r7
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	fa04 f303 	lsl.w	r3, r4, r3
 8000eea:	4213      	tst	r3, r2
 8000eec:	f47f aee6 	bne.w	8000cbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fdf0 	bl	8000ad4 <HAL_GetTick>
 8000ef4:	eba0 0308 	sub.w	r3, r0, r8
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d9e7      	bls.n	8000ecc <HAL_RCC_OscConfig+0x230>
 8000efc:	e733      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
 8000efe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000f02:	fab3 f383 	clz	r3, r3
 8000f06:	440b      	add	r3, r1
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	2702      	movs	r7, #2
 8000f0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fde1 	bl	8000ad4 <HAL_GetTick>
 8000f12:	4680      	mov	r8, r0
 8000f14:	fa97 f3a7 	rbit	r3, r7
 8000f18:	fa97 f3a7 	rbit	r3, r7
 8000f1c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f22:	fa97 f3a7 	rbit	r3, r7
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	fa04 f303 	lsl.w	r3, r4, r3
 8000f32:	4213      	tst	r3, r2
 8000f34:	f43f aec2 	beq.w	8000cbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fdcc 	bl	8000ad4 <HAL_GetTick>
 8000f3c:	eba0 0308 	sub.w	r3, r0, r8
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d9e7      	bls.n	8000f14 <HAL_RCC_OscConfig+0x278>
 8000f44:	e70f      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f50:	4c91      	ldr	r4, [pc, #580]	; (8001198 <HAL_RCC_OscConfig+0x4fc>)
 8000f52:	69e3      	ldr	r3, [r4, #28]
 8000f54:	00d9      	lsls	r1, r3, #3
 8000f56:	d433      	bmi.n	8000fc0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	69e3      	ldr	r3, [r4, #28]
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	61e3      	str	r3, [r4, #28]
 8000f60:	69e3      	ldr	r3, [r4, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f6a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4f8b      	ldr	r7, [pc, #556]	; (800119c <HAL_RCC_OscConfig+0x500>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	05da      	lsls	r2, r3, #23
 8000f72:	d527      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f74:	68eb      	ldr	r3, [r5, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d135      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x34a>
 8000f7a:	6a23      	ldr	r3, [r4, #32]
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f82:	f7ff fda7 	bl	8000ad4 <HAL_GetTick>
 8000f86:	2702      	movs	r7, #2
 8000f88:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8a:	f04f 0901 	mov.w	r9, #1
 8000f8e:	fa97 f3a7 	rbit	r3, r7
 8000f92:	fa97 f3a7 	rbit	r3, r7
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d064      	beq.n	8001064 <HAL_RCC_OscConfig+0x3c8>
 8000f9a:	6a22      	ldr	r2, [r4, #32]
 8000f9c:	fa97 f3a7 	rbit	r3, r7
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8000fac:	4213      	tst	r3, r2
 8000fae:	d050      	beq.n	8001052 <HAL_RCC_OscConfig+0x3b6>
    if(pwrclkchanged == SET)
 8000fb0:	2e00      	cmp	r6, #0
 8000fb2:	f43f ae87 	beq.w	8000cc4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb6:	69e3      	ldr	r3, [r4, #28]
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61e3      	str	r3, [r4, #28]
 8000fbe:	e681      	b.n	8000cc4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e7d3      	b.n	8000f6c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fd82 	bl	8000ad4 <HAL_GetTick>
 8000fd0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	d4cd      	bmi.n	8000f74 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd8:	f7ff fd7c 	bl	8000ad4 <HAL_GetTick>
 8000fdc:	eba0 0008 	sub.w	r0, r0, r8
 8000fe0:	2864      	cmp	r0, #100	; 0x64
 8000fe2:	d9f6      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x336>
 8000fe4:	e6bf      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	bb33      	cbnz	r3, 8001036 <HAL_RCC_OscConfig+0x39a>
 8000fe8:	6a23      	ldr	r3, [r4, #32]
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	6223      	str	r3, [r4, #32]
 8000ff0:	6a23      	ldr	r3, [r4, #32]
 8000ff2:	f023 0304 	bic.w	r3, r3, #4
 8000ff6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fd6c 	bl	8000ad4 <HAL_GetTick>
 8000ffc:	2702      	movs	r7, #2
 8000ffe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	f04f 0901 	mov.w	r9, #1
 8001004:	fa97 f3a7 	rbit	r3, r7
 8001008:	fa97 f3a7 	rbit	r3, r7
 800100c:	b373      	cbz	r3, 800106c <HAL_RCC_OscConfig+0x3d0>
 800100e:	6a22      	ldr	r2, [r4, #32]
 8001010:	fa97 f3a7 	rbit	r3, r7
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa09 f303 	lsl.w	r3, r9, r3
 8001020:	4213      	tst	r3, r2
 8001022:	d0c5      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001024:	f7ff fd56 	bl	8000ad4 <HAL_GetTick>
 8001028:	f241 3388 	movw	r3, #5000	; 0x1388
 800102c:	eba0 0008 	sub.w	r0, r0, r8
 8001030:	4298      	cmp	r0, r3
 8001032:	d9e7      	bls.n	8001004 <HAL_RCC_OscConfig+0x368>
 8001034:	e697      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001036:	2b05      	cmp	r3, #5
 8001038:	6a23      	ldr	r3, [r4, #32]
 800103a:	d103      	bne.n	8001044 <HAL_RCC_OscConfig+0x3a8>
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6223      	str	r3, [r4, #32]
 8001042:	e79a      	b.n	8000f7a <HAL_RCC_OscConfig+0x2de>
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6223      	str	r3, [r4, #32]
 800104a:	6a23      	ldr	r3, [r4, #32]
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	e796      	b.n	8000f80 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fd3f 	bl	8000ad4 <HAL_GetTick>
 8001056:	f241 3388 	movw	r3, #5000	; 0x1388
 800105a:	eba0 0008 	sub.w	r0, r0, r8
 800105e:	4298      	cmp	r0, r3
 8001060:	d995      	bls.n	8000f8e <HAL_RCC_OscConfig+0x2f2>
 8001062:	e680      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
 8001064:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800106a:	e797      	b.n	8000f9c <HAL_RCC_OscConfig+0x300>
 800106c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001070:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001072:	e7cd      	b.n	8001010 <HAL_RCC_OscConfig+0x374>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001074:	4c48      	ldr	r4, [pc, #288]	; (8001198 <HAL_RCC_OscConfig+0x4fc>)
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d07a      	beq.n	8001176 <HAL_RCC_OscConfig+0x4da>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001080:	2802      	cmp	r0, #2
 8001082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001086:	d151      	bne.n	800112c <HAL_RCC_OscConfig+0x490>
 8001088:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fd19 	bl	8000ad4 <HAL_GetTick>
 80010a2:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80010a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	2601      	movs	r6, #1
 80010aa:	fa98 f3a8 	rbit	r3, r8
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	fa98 f3a8 	rbit	r3, r8
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa06 f303 	lsl.w	r3, r6, r3
 80010c0:	4213      	tst	r3, r2
 80010c2:	d12d      	bne.n	8001120 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c4:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	430b      	orrs	r3, r1
 80010cc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010d0:	4313      	orrs	r3, r2
 80010d2:	6063      	str	r3, [r4, #4]
 80010d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ea:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 80010ec:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80010ee:	f7ff fcf1 	bl	8000ad4 <HAL_GetTick>
 80010f2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010f6:	4605      	mov	r5, r0
 80010f8:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	fa96 f3a6 	rbit	r3, r6
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa07 f303 	lsl.w	r3, r7, r3
 800110e:	4213      	tst	r3, r2
 8001110:	f47f addc 	bne.w	8000ccc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fcde 	bl	8000ad4 <HAL_GetTick>
 8001118:	1b40      	subs	r0, r0, r5
 800111a:	2802      	cmp	r0, #2
 800111c:	d9ec      	bls.n	80010f8 <HAL_RCC_OscConfig+0x45c>
 800111e:	e622      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001120:	f7ff fcd8 	bl	8000ad4 <HAL_GetTick>
 8001124:	1bc3      	subs	r3, r0, r7
 8001126:	2b02      	cmp	r3, #2
 8001128:	d9bf      	bls.n	80010aa <HAL_RCC_OscConfig+0x40e>
 800112a:	e61c      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
 800112c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001138:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001142:	f7ff fcc7 	bl	8000ad4 <HAL_GetTick>
 8001146:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800114a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	2701      	movs	r7, #1
 800114e:	fa96 f3a6 	rbit	r3, r6
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	fa96 f3a6 	rbit	r3, r6
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa07 f303 	lsl.w	r3, r7, r3
 8001164:	4213      	tst	r3, r2
 8001166:	f43f adb1 	beq.w	8000ccc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fcb3 	bl	8000ad4 <HAL_GetTick>
 800116e:	1b40      	subs	r0, r0, r5
 8001170:	2802      	cmp	r0, #2
 8001172:	d9ec      	bls.n	800114e <HAL_RCC_OscConfig+0x4b2>
 8001174:	e5f7      	b.n	8000d66 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001176:	2801      	cmp	r0, #1
 8001178:	f43f adf6 	beq.w	8000d68 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 800117c:	6863      	ldr	r3, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800117e:	6a2a      	ldr	r2, [r5, #32]
 8001180:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001184:	4291      	cmp	r1, r2
 8001186:	f47f adc4 	bne.w	8000d12 <HAL_RCC_OscConfig+0x76>
 800118a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800118c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001190:	4293      	cmp	r3, r2
 8001192:	f43f ad9b 	beq.w	8000ccc <HAL_RCC_OscConfig+0x30>
 8001196:	e5bc      	b.n	8000d12 <HAL_RCC_OscConfig+0x76>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000

080011a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80011a2:	4c13      	ldr	r4, [pc, #76]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80011a4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a6:	f001 030c 	and.w	r3, r1, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11e      	bne.n	80011ec <HAL_RCC_GetSysClockFreq+0x4c>
 80011ae:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80011b2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011b6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x54>)
 80011c4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa92 f2a2 	rbit	r2, r2
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	40d3      	lsrs	r3, r2
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80011da:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80011dc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80011de:	bf4a      	itet	mi
 80011e0:	4b06      	ldrmi	r3, [pc, #24]	; (80011fc <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80011e2:	4b07      	ldrpl	r3, [pc, #28]	; (8001200 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80011e4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80011e8:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011ea:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80011ee:	e7fc      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x4a>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	08001640 	.word	0x08001640
 80011f8:	08001650 	.word	0x08001650
 80011fc:	007a1200 	.word	0x007a1200
 8001200:	003d0900 	.word	0x003d0900

08001204 <HAL_RCC_ClockConfig>:
{
 8001204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001208:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800120a:	4604      	mov	r4, r0
 800120c:	b910      	cbnz	r0, 8001214 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
}
 8001210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_RCC_ClockConfig+0x144>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	428b      	cmp	r3, r1
 800121e:	d32e      	bcc.n	800127e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	0791      	lsls	r1, r2, #30
 8001224:	d436      	bmi.n	8001294 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	07d2      	lsls	r2, r2, #31
 8001228:	d43c      	bmi.n	80012a4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800122a:	4a47      	ldr	r2, [pc, #284]	; (8001348 <HAL_RCC_ClockConfig+0x144>)
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	42ab      	cmp	r3, r5
 8001234:	d874      	bhi.n	8001320 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	4d44      	ldr	r5, [pc, #272]	; (800134c <HAL_RCC_ClockConfig+0x148>)
 800123a:	f012 0f04 	tst.w	r2, #4
 800123e:	d17b      	bne.n	8001338 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	0713      	lsls	r3, r2, #28
 8001242:	d506      	bpl.n	8001252 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001244:	686b      	ldr	r3, [r5, #4]
 8001246:	6922      	ldr	r2, [r4, #16]
 8001248:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800124c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001250:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001252:	f7ff ffa5 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8001256:	686b      	ldr	r3, [r5, #4]
 8001258:	22f0      	movs	r2, #240	; 0xf0
 800125a:	fa92 f2a2 	rbit	r2, r2
 800125e:	fab2 f282 	clz	r2, r2
 8001262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001266:	40d3      	lsrs	r3, r2
 8001268:	4a39      	ldr	r2, [pc, #228]	; (8001350 <HAL_RCC_ClockConfig+0x14c>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	40d8      	lsrs	r0, r3
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_RCC_ClockConfig+0x150>)
 8001270:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_ClockConfig+0x154>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f7ff fbf7 	bl	8000a68 <HAL_InitTick>
  return HAL_OK;
 800127a:	2000      	movs	r0, #0
 800127c:	e7c8      	b.n	8001210 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f023 0307 	bic.w	r3, r3, #7
 8001284:	430b      	orrs	r3, r1
 8001286:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	428b      	cmp	r3, r1
 8001290:	d1bd      	bne.n	800120e <HAL_RCC_ClockConfig+0xa>
 8001292:	e7c5      	b.n	8001220 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	492d      	ldr	r1, [pc, #180]	; (800134c <HAL_RCC_ClockConfig+0x148>)
 8001296:	68a0      	ldr	r0, [r4, #8]
 8001298:	684b      	ldr	r3, [r1, #4]
 800129a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800129e:	4303      	orrs	r3, r0
 80012a0:	604b      	str	r3, [r1, #4]
 80012a2:	e7c0      	b.n	8001226 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a4:	6862      	ldr	r2, [r4, #4]
 80012a6:	4e29      	ldr	r6, [pc, #164]	; (800134c <HAL_RCC_ClockConfig+0x148>)
 80012a8:	2a01      	cmp	r2, #1
 80012aa:	d126      	bne.n	80012fa <HAL_RCC_ClockConfig+0xf6>
 80012ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b4:	6831      	ldr	r1, [r6, #0]
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	d0a1      	beq.n	800120e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	6873      	ldr	r3, [r6, #4]
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	431a      	orrs	r2, r3
 80012d2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80012d4:	f7ff fbfe 	bl	8000ad4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80012dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	6873      	ldr	r3, [r6, #4]
 80012e0:	6862      	ldr	r2, [r4, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ea:	d09e      	beq.n	800122a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff fbf2 	bl	8000ad4 <HAL_GetTick>
 80012f0:	1bc0      	subs	r0, r0, r7
 80012f2:	4540      	cmp	r0, r8
 80012f4:	d9f3      	bls.n	80012de <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80012f6:	2003      	movs	r0, #3
 80012f8:	e78a      	b.n	8001210 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fa:	2a02      	cmp	r2, #2
 80012fc:	bf0c      	ite	eq
 80012fe:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001302:	2302      	movne	r3, #2
 8001304:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	6830      	ldr	r0, [r6, #0]
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4203      	tst	r3, r0
 800131e:	e7d3      	b.n	80012c8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	f023 0307 	bic.w	r3, r3, #7
 8001326:	432b      	orrs	r3, r5
 8001328:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	6813      	ldr	r3, [r2, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	42ab      	cmp	r3, r5
 8001332:	f47f af6c 	bne.w	800120e <HAL_RCC_ClockConfig+0xa>
 8001336:	e77e      	b.n	8001236 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001338:	686b      	ldr	r3, [r5, #4]
 800133a:	68e1      	ldr	r1, [r4, #12]
 800133c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001340:	430b      	orrs	r3, r1
 8001342:	606b      	str	r3, [r5, #4]
 8001344:	e77c      	b.n	8001240 <HAL_RCC_ClockConfig+0x3c>
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000
 800134c:	40021000 	.word	0x40021000
 8001350:	08001630 	.word	0x08001630
 8001354:	20000430 	.word	0x20000430
 8001358:	20000438 	.word	0x20000438

0800135c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800135e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001360:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001378:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b530      	push	{r4, r5, lr}
 8001384:	68dc      	ldr	r4, [r3, #12]
 8001386:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	2d04      	cmp	r5, #4
 8001392:	bf28      	it	cs
 8001394:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139c:	bf8c      	ite	hi
 800139e:	3c03      	subhi	r4, #3
 80013a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a2:	fa03 f505 	lsl.w	r5, r3, r5
 80013a6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013aa:	40a3      	lsls	r3, r4
 80013ac:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80013b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	bfac      	ite	ge
 80013ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	4a08      	ldrlt	r2, [pc, #32]	; (80013e0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	bfb8      	it	lt
 80013c6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	bfaa      	itet	ge
 80013ce:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013d8:	bd30      	pop	{r4, r5, pc}
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	e000ed14 	.word	0xe000ed14

080013e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013e4:	2800      	cmp	r0, #0
 80013e6:	db08      	blt.n	80013fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e8:	0942      	lsrs	r2, r0, #5
 80013ea:	2301      	movs	r3, #1
 80013ec:	f000 001f 	and.w	r0, r0, #31
 80013f0:	fa03 f000 	lsl.w	r0, r3, r0
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_NVIC_EnableIRQ+0x18>)
 80013f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100

08001400 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	3801      	subs	r0, #1
 8001402:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001406:	d20b      	bcs.n	8001420 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001408:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	21f0      	movs	r1, #240	; 0xf0
 8001412:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001416:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001418:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001420:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <HAL_TIMEx_CommutCallback>:
 8001428:	4770      	bx	lr

0800142a <HAL_TIMEx_BreakCallback>:
 800142a:	4770      	bx	lr

0800142c <HAL_TIMEx_Break2Callback>:
 800142c:	4770      	bx	lr
	...

08001430 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001432:	4604      	mov	r4, r0
{
 8001434:	b08e      	sub	sp, #56	; 0x38
  LEDx_GPIO_CLK_ENABLE(Led);
 8001436:	bb00      	cbnz	r0, 800147a <BSP_LED_Init+0x4a>
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <BSP_LED_Init+0x100>)
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <BSP_LED_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800144e:	4d3a      	ldr	r5, [pc, #232]	; (8001538 <BSP_LED_Init+0x108>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001450:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001454:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001458:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001460:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001466:	f7ff fb3b 	bl	8000ae0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800146a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800146e:	2200      	movs	r2, #0
 8001470:	4631      	mov	r1, r6
 8001472:	f7ff fbf9 	bl	8000c68 <HAL_GPIO_WritePin>
}
 8001476:	b00e      	add	sp, #56	; 0x38
 8001478:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800147a:	2801      	cmp	r0, #1
 800147c:	d10a      	bne.n	8001494 <BSP_LED_Init+0x64>
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <BSP_LED_Init+0x100>)
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	9b02      	ldr	r3, [sp, #8]
 8001492:	e7db      	b.n	800144c <BSP_LED_Init+0x1c>
 8001494:	2802      	cmp	r0, #2
 8001496:	d10a      	bne.n	80014ae <BSP_LED_Init+0x7e>
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <BSP_LED_Init+0x100>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	9b03      	ldr	r3, [sp, #12]
 80014ac:	e7ce      	b.n	800144c <BSP_LED_Init+0x1c>
 80014ae:	2803      	cmp	r0, #3
 80014b0:	d10a      	bne.n	80014c8 <BSP_LED_Init+0x98>
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <BSP_LED_Init+0x100>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	9b04      	ldr	r3, [sp, #16]
 80014c6:	e7c1      	b.n	800144c <BSP_LED_Init+0x1c>
 80014c8:	2804      	cmp	r0, #4
 80014ca:	d10a      	bne.n	80014e2 <BSP_LED_Init+0xb2>
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <BSP_LED_Init+0x100>)
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	9b05      	ldr	r3, [sp, #20]
 80014e0:	e7b4      	b.n	800144c <BSP_LED_Init+0x1c>
 80014e2:	2805      	cmp	r0, #5
 80014e4:	d10a      	bne.n	80014fc <BSP_LED_Init+0xcc>
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <BSP_LED_Init+0x100>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f6:	9306      	str	r3, [sp, #24]
 80014f8:	9b06      	ldr	r3, [sp, #24]
 80014fa:	e7a7      	b.n	800144c <BSP_LED_Init+0x1c>
 80014fc:	2806      	cmp	r0, #6
 80014fe:	d10a      	bne.n	8001516 <BSP_LED_Init+0xe6>
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <BSP_LED_Init+0x100>)
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	9307      	str	r3, [sp, #28]
 8001512:	9b07      	ldr	r3, [sp, #28]
 8001514:	e79a      	b.n	800144c <BSP_LED_Init+0x1c>
 8001516:	2807      	cmp	r0, #7
 8001518:	d198      	bne.n	800144c <BSP_LED_Init+0x1c>
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <BSP_LED_Init+0x100>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152a:	9308      	str	r3, [sp, #32]
 800152c:	9b08      	ldr	r3, [sp, #32]
 800152e:	e78d      	b.n	800144c <BSP_LED_Init+0x1c>
 8001530:	40021000 	.word	0x40021000
 8001534:	08001660 	.word	0x08001660
 8001538:	20000440 	.word	0x20000440

0800153c <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <BSP_LED_On+0x14>)
 800153e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <BSP_LED_On+0x18>)
 8001544:	2201      	movs	r2, #1
 8001546:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800154a:	f7ff bb8d 	b.w	8000c68 <HAL_GPIO_WritePin>
 800154e:	bf00      	nop
 8001550:	08001660 	.word	0x08001660
 8001554:	20000440 	.word	0x20000440

08001558 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <BSP_LED_Off+0x14>)
 800155a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <BSP_LED_Off+0x18>)
 8001560:	2200      	movs	r2, #0
 8001562:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001566:	f7ff bb7f 	b.w	8000c68 <HAL_GPIO_WritePin>
 800156a:	bf00      	nop
 800156c:	08001660 	.word	0x08001660
 8001570:	20000440 	.word	0x20000440

08001574 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <BSP_LED_Toggle+0x10>)
 8001576:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800157a:	4b03      	ldr	r3, [pc, #12]	; (8001588 <BSP_LED_Toggle+0x14>)
 800157c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001580:	f7ff bb77 	b.w	8000c72 <HAL_GPIO_TogglePin>
 8001584:	08001660 	.word	0x08001660
 8001588:	20000440 	.word	0x20000440

0800158c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800158c:	b510      	push	{r4, lr}
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <BSP_PB_Init+0x7c>)
 8001590:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001592:	b940      	cbnz	r0, 80015a6 <BSP_PB_Init+0x1a>
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	9b02      	ldr	r3, [sp, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80015b8:	b971      	cbnz	r1, 80015d8 <BSP_PB_Init+0x4c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80015ba:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	e9cd 3103 	strd	r3, r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2202      	movs	r2, #2
 80015c2:	2303      	movs	r3, #3
 80015c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <BSP_PB_Init+0x80>)
 80015ca:	a903      	add	r1, sp, #12
 80015cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80015d0:	f7ff fa86 	bl	8000ae0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80015d4:	b008      	add	sp, #32
 80015d6:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 80015d8:	2901      	cmp	r1, #1
 80015da:	d1fb      	bne.n	80015d4 <BSP_PB_Init+0x48>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2400      	movs	r4, #0
 80015de:	2303      	movs	r3, #3
 80015e0:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <BSP_PB_Init+0x84>)
 80015e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <BSP_PB_Init+0x80>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80015ea:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80015ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80015f0:	a903      	add	r1, sp, #12
 80015f2:	f7ff fa75 	bl	8000ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80015f6:	4622      	mov	r2, r4
 80015f8:	210f      	movs	r1, #15
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff fec0 	bl	8001380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001600:	2006      	movs	r0, #6
 8001602:	f7ff feef 	bl	80013e4 <HAL_NVIC_EnableIRQ>
}
 8001606:	e7e5      	b.n	80015d4 <BSP_PB_Init+0x48>
 8001608:	40021000 	.word	0x40021000
 800160c:	2000043c 	.word	0x2000043c
 8001610:	10110000 	.word	0x10110000

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
